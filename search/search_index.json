{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Training Description","text":"<p>Please follow the package, class, and method names as described in the exercises.</p>"},{"location":"#technical-environment","title":"Technical Environment","text":""},{"location":"#java","title":"Java","text":"<ul> <li>openjdk-20 </li> <li>At least higher than version 18.</li> </ul>"},{"location":"#c-sharp","title":"C Sharp","text":"<p>Coming soon.</p>"},{"location":"#the-branch-concept-for-the-labs","title":"The Branch Concept for The Labs","text":""},{"location":"#lab-branches-for-coding-challenges","title":"Lab-Branches for Coding Challenges","text":"<p>A fresh codebase for each lab to implement the exercises.</p> <p>The exercises build on each other. You always have a fresh sample solution in the lab branches.</p> <p>Branch name pattern: lab/{versionNumber}/{labNumber}</p>"},{"location":"#solution-branches-for-comparison-and-consolidation","title":"Solution-Branches for Comparison and Consolidation","text":"<p>A possible solution for each lab.</p> <p>For each exercise there is a sample solution for comparison and consolidation.  Of course, there is not one possible solution. The tests, especially the architecture  tests, help to ensure conformance to the clean architecture pattern.</p> <p>Branch name pattern: solution/{versionNumber}/{labNumber}</p>"},{"location":"#lab-description","title":"Lab Description","text":"<p>See lab description online or  publish it local like described here based on the main branch.</p>"},{"location":"#unit-and-architecture-tests","title":"Unit and Architecture Tests","text":"<p>The demo projects contains architecture tests and unit tests to verify your implementation. For the most tasks it is necessary to uncomment unit tests, after implementing the task.  In some cases it is possible to fix or to add import statements within the unit tests.</p>"},{"location":"mkdocs/","title":"Access Lab Description with MkDocs","text":"<p>The lab description is written with MkDocs.</p> <ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#install-mkdocs","title":"Install MkDocs","text":"<p>See MkDocs Installation Guide.</p>"},{"location":"mkdocs/#prepare-installation-on-ubuntu","title":"Prepare Installation on Ubuntu","text":""},{"location":"mkdocs/#install-python","title":"Install Python","text":"<pre><code>sudo apt-get install python3\n</code></pre>"},{"location":"mkdocs/#install-pip","title":"Install Pip","text":"<pre><code>sudo apt-get install pip\n</code></pre> <p>Check the installation: <pre><code>pip -V\n</code></pre></p>"},{"location":"mkdocs/#prepare-installation-on-windows","title":"Prepare Installation on Windows","text":""},{"location":"mkdocs/#install-python-and-pip","title":"Install Python and Pip","text":"<p>Use the windows installer available here.</p> <p>Check the installation: <pre><code>pip -V\n</code></pre></p>"},{"location":"mkdocs/#install-mkdocs_1","title":"Install MkDocs","text":"<pre><code>pip install mkdocs\n</code></pre> <pre><code>pip install mkdocs-material\n</code></pre> <pre><code>pip install mkdocs-material-extensions\n</code></pre>"},{"location":"mkdocs/#publish-lab-description-locally-with-mkdocs","title":"Publish Lab Description Locally with MkDocs","text":"<ol> <li>mkdocs build</li> <li>mkddocs serve</li> <li>Open in browser</li> </ol>"},{"location":"docs/help/git/","title":"Git","text":"<p>This section describes some useful git basics how you can \"copy\" it to your own remote repo.</p> <ul> <li>Fork The Repository</li> <li>Custom Repository<ul> <li>Clone</li> <li>Change the Remote</li> </ul> </li> </ul>"},{"location":"docs/help/git/#fork-the-repository","title":"Fork The Repository","text":"<p>If you want to keep track of the original repository, but add your own branches simply  fork it.</p> <ol> <li>Navigate to the repository: https://github.com/MatthiasEschhold/hexacleanws</li> <li>In the top-right corner of the page, click Fork.    </li> <li>Do not select Copy the DEFAULT branch only.    </li> <li>Click Create fork. \ud83c\udf89</li> </ol>"},{"location":"docs/help/git/#custom-repository","title":"Custom Repository","text":"<p>If forking the repository is not an option, you need to change the remote origin to yours after cloning it:</p>"},{"location":"docs/help/git/#clone","title":"Clone","text":"<p>To clone the repository simply run:</p> <pre><code>$ git clone https://github.com/MatthiasEschhold/hexacleanws.git\n</code></pre>"},{"location":"docs/help/git/#change-the-remote","title":"Change the Remote","text":"<p>To change the remote origin to your custom one, rename the old one and set the new one:</p> <pre><code># Rename the current origin\n$ git remote rename origin MatthiasEschhold-origin\n\n# Set the new remote origin\n$ git remote set-url origin &lt;https://git-repo/new-repository.git&gt;\n</code></pre>"},{"location":"docs/lab1/lab1/","title":"Domain Ring und Use Case Ring","text":""},{"location":"docs/lab1/lab1/#domain-model","title":"Domain Model","text":"Coding Task 1 Dom\u00e4nenmodell Vehicle <ol> <li>Implementiere das dargestellte Dom\u00e4nenmodell Vehicle</li> <li>Vehicle ist die Root Entity des Dom\u00e4nenmodell.</li> <li>Implementiere die untergeordneten Dom\u00e4nenobjekte als Value Object</li> <li>Erstelle das Package vehicle.domain.model und lege die Dom\u00e4nenobjekte in diesem Package ab</li> <li>Implementiere die im folgenden aufgef\u00fchrten Validierungsregeln in den betroffenen Dom\u00e4nenobjekte</li> </ol>  ![Vehicle Domain Model](../img/vehicle-domain-model.png)      Domain Object Validation Rule Vehicle Alle Eigenschaften m\u00fcssen vorhanden und f\u00fcr sich valide sein. VIN Ein valider Wert muss dem Vin-Regex-Pattern folgen. LicensePlate Ein valider Wert muss dem LicensePlate-Regex-Pattern folgen. Mileage Der Kilometerstand muss gr\u00f6\u00dfer 0 sein. EquipmentCode Ein valider Wert muss dem EquipmentCode-Regex-Pattern folgen. Alle anderen Dom\u00e4nenobjekte Kein Nullwerte, keine leeren oder blank Strings Vin-Regex-Pattern <pre><code>// examples\n// WP0ZZZ99ZTS392155\n// WBAOLZ99ZTS349156\n\n\"(?=.*\\\\d|=.*[A-Z])(?=.*[A-Z])[A-Z0-9]{17}\"\n</code></pre> LicensePlate-Regex-Pattern <pre><code> \"[A-Z\u00d6\u00dc\u00c40-9]{1,5}[-]{0,1}[A-Z\u00d6\u00dc\u00c40-9]{0,10}[-]{0,1}[A-Z\u00d6\u00dc\u00c40-9]{0,4}\"\"[A-Z\u00d6\u00dc\u00c40-9]{1,5}[-]{0,1}[A-Z\u00d6\u00dc\u00c40-9]{0,10}[-]{0,1}[A-Z\u00d6\u00dc\u00c40-9]{0,4}\"  \n</code></pre> EquipmentCode-Regex-Pattern <pre><code>// examples\n// WP0ZZZ99ZTS392155\n// WBAOLZ99ZTS349156\n\n\"(?=.*\\d|=.*[A-Z])(?=.*[A-Z])[A-Z0-9]{17}\"\n</code></pre> Tests Coding Task 1 RUN DomainEntityTest     RUN CleanArchitectureFitnessFunction"},{"location":"docs/lab1/lab1/#domain-service-und-use-cases","title":"Domain Service und Use Cases","text":"Coding Task 2 Erstelle die ein- und ausgehenden Use Cases sowie den Use-Case-Connector (Stereotype Service) <ol> <li>Erstelle das Package domain.service als Subpackage von vehicle und erstelle die Klasse VehicleService </li> <li>Erstelle die Packages usecase.in und usecase.out als Subpackages von vehicle</li> <li>Erstelle den eingehenden Use Case VehicleCommand im daf\u00fcr vorgesehenen Package mit der Schnittstelle createVehicle</li> <li>Erstelle die ausgehenden Use Cases VehicleRepository und FetchVehicleMasterData im daf\u00fcr vorgesehenen Package mit den daf\u00fcr vorgesehenen Schnittstellen</li> <li>Implementiere den Anwendungsfall createVehicle im VehicleService</li> </ol> Schnittstelle VehicleCommand <pre><code>Vehicle createVehicle(Vin vin, VehicleMotionData vehicleMotionData);\n</code></pre> Schnittstelle VehicleRepository <pre><code>Vehicle save(Vehicle vehicle);\n</code></pre> Schnittstelle FetchVehicleMasterData <pre><code>VehicleMasterData fetch(Vin vin);\n</code></pre> Tests Coding Task 2 RUN UseCaseConnectorTest     RUN CleanArchitectureFitnessFunction"},{"location":"docs/lab2/lab2/","title":"Adapter Ring - Implementierung des Ports &amp; Adapters Pattern","text":""},{"location":"docs/lab2/lab2/#input-adapter","title":"Input Adapter","text":"Coding Task 3 Erstelle einen Input Adapter f\u00fcr den eingehenden Use Case <ol> <li>Erstelle das Package adapter.in als Subpackage von vehicle und erstelle den Interface Adapter VehicleController</li> <li>Implementiere die technische HTTP Schnittstelle zur Anlage eines Fahrzeugs und nutze hierf\u00fcr den Use Case VehicleCommand</li> <li>Erstelle das DTO VehicleResource (siehe Vorlage) und ein Mapper (VehicleWebMapper) f\u00fcr das DTO</li> <li>Ignoriere Details des Frameworks und des REST Architekturstils bei der Implementierung</li> </ol> VehicleResource     ```java public class VehicleResource {      private String vin;     private VehicleMotionDataResource vehicleMotionData;     private VehicleMasterDataResource vehicleMasterData;      public VehicleMasterDataResource getVehicleMasterData() {         return vehicleMasterData;     }      public void setVehicleMasterData(VehicleMasterDataResource vehicleMasterData) {         this.vehicleMasterData = vehicleMasterData;     }      public String getVin() {         return vin;     }      public void setVin(String vin) {         this.vin = vin;     }      public VehicleMotionDataResource getVehicleMotionData() {         return vehicleMotionData;     }      public void setVehicleMotionData(VehicleMotionDataResource vehicleMotionData) {         this.vehicleMotionData = vehicleMotionData;     } }     ```"},{"location":"docs/lab2/lab2/#output-adapter","title":"Output Adapter","text":"Coding Task 4 Erstelle die Output Adapter f\u00fcr die ausgehenden Use Cases <ol> <li>Erstelle das Package adapter.out als Subpackage von vehicle</li> und erstelle das Datenbank Repository VehicleDbRepository <li>Implementiere den Use Case VehicleRepository</li> <li>F\u00fchre das DTO VehicleDbEntity (siehe Vorlage) sowie den Mapper VehicleDbMapper ein</li> <li>Ignoriere Details des Frameworks bei der Implementierung</li> </ol> VehicleDbEntity     ```java public class VehicleDbEntity {      private String vin;     private String licensePlate;      public String getVin() {         return vin;     }      public void setVin(String vin) {         this.vin = vin;     }      public String getLicensePlate() {         return licensePlate;     }      public void setLicensePlate(String licensePlate) {         this.licensePlate = licensePlate;     } }     ```"},{"location":"docs/lab3/lab3/","title":"Domain Service Pattern des Domain Ring","text":""},{"location":"docs/lab3/lab3/#domain-service-pattern","title":"Domain Service Pattern","text":"<p>Ein Domain Service implementiert Business Logik, die keinem Dom\u00e4nenobjekt zugeordnet werden kann, oder  wenn f\u00fcr die Ausf\u00fchrung der Business Logik zus\u00e4tzlich Abh\u00e4ngigkeiten aufgebaut werden m\u00fcssen, die den  Abh\u00e4ngigkeitsregeln eines Dom\u00e4nenobjekts widersprechen w\u00fcrden</p>"},{"location":"docs/lab3/lab3/#anwendungsfall-risikobewertung-und-diebstahlprufung","title":"Anwendungsfall Risikobewertung und Diebstahlpr\u00fcfung","text":""},{"location":"docs/lab3/lab3/#coding-task-4","title":"Coding Task 4","text":"<p>Implementiere den TheftRiskRatingService </p> <ol> <li>Erstelle das Package domain.service als Subpackage von vehicle und erstelle den Domain Service TheftRiskRatingService</li> <li>Integriere die Risikobewertung in den Anlageprozess f\u00fcr ein Fahrzeug</li> <li>Betrachte das ausgebaute Dom\u00e4nenmodell in domain.service und nutze die Dom\u00e4nenobjekte</li> <li>Wird ein Risikobewertung &gt; 60 Risikopunkte ermittelt, muss eine Diebstahlabfrage bei Interpol durchgef\u00fchrt werden</li> <li>Erg\u00e4nze Use Case und Adapter Implementierung f\u00fcr die Diebstahlabfrage bei Interpol, f\u00fcr die Abfrage von Risikol\u00e4nder sowie -marken</li> </ol> <p></p> User Story Risikobewertung Fahrzeudiebstahl nach \u00a70815a  Als Produktmanager m\u00f6chte ich, dass die Risikobewertung f\u00fcr ein Fahrzeug im Anlageprozess durchgef\u00fchrt wird. Die Risikobewertung folgt dem im folgenden beschriebenen Regelwerk:  <ol> <li></li> </ol> Akzeptanzkriterien: <ol> <li></li> </ol> Erweitere Risikobewertung auf Basis von Risikol\u00e4nder und Risikomarken f\u00fcr die Risikobewertung nach \u00a70815a  Als Produktmanager m\u00f6chte dich die Risikobewertung nach \u00a70815a mit der Ber\u00fccksichtigung von Risikol\u00e4ndern und -marken erweitern.  <ol> <li></li> </ol> Akzeptanzkriterien: <ol> <li></li> </ol> <p>Weitere Informationen zur Risikobewertung und Diebstahlabfrage bei Interpol:</p> Use Case Diebstahlabfrage Interpol     ```java public interface DetectInterpolTheftStatus {     TheftStatus detect(Vin vin, LicensePlate licensePlate); }    ```  Use Case Abfrage Risikol\u00e4nder     ```java public interface FetchHighRiskCountries {     HighRiskCountries fetch(); }    ```  Use Case Abfrage Risikomarken     ```java public interface FetchHighRiskVehicleModels {     HighRiskVehicleModels fetch(); }    ```"},{"location":"docs/lab4/lab4/","title":"Weitere Designprinzipen","text":""},{"location":"docs/lab4/lab4/#encapsulation-und-lesbarkeit-durch-command-objekte","title":"Encapsulation und Lesbarkeit durch Command Objekte","text":""},{"location":"docs/lab4/lab4/#erweiterung-des-domanenmodell-mileage-und-mileage-history","title":"Erweiterung des Dom\u00e4nenmodell Mileage und Mileage History","text":""},{"location":"docs/lab4/lab4/#anwendungsfall-update-mileage-mit-plausibilitatsprufung","title":"Anwendungsfall Update Mileage mit Plausibilit\u00e4tspr\u00fcfung","text":"Coding Task 5 Implementiere die Abfrage von Fahrzeudaten anhand der Vin <li>F\u00fchre den eingehenden Use Case VehicleQuery mit der Schnittstelle wie unten beschrieben ein.</li> <li>Erweitere den ausgehenden Use Case VehicleRepository um die Schnittstelle wie unten beschrieben. <li>Implementiere den eingehenden Use Case im VehicleService</li> Schnittstelle VehicleQuery <pre><code>Vehicle findByVin(Vin vin);\n</code></pre> Schnittstelle VehicleRepository <pre><code>VehicleMotionData findVehicleMotionDataByVin(Vin vin);\n</code></pre>"},{"location":"docs/lab5/lab5/","title":"Abh\u00e4ngigkeiten zwischen Dom\u00e4nenmodulen","text":""},{"location":"docs/lab5/lab5/#neue-domanenmodule","title":"Neue Dom\u00e4nenmodule","text":"<p>Investigate the introduced domain modules GarageOrder and PartsCatalogue. Both domain modules depends on the Vehicle domain module.</p> <p>In context of the garage order only the license plate and, the mileage of a vehicle are relevant.</p> <p>For the parts catalogue only the vin, the vehicle model and, the domain value has5GSupport are from importance.</p> <p>See the garage order form for more details:</p> <p></p> <p>See also the explosion chart of the front brake, as a example for the graphical visualization of a spare part in the parts catalogue:</p> <p></p> <p>Additional information are described in the corresponding spare parts table.</p> <p></p>"},{"location":"docs/lab5/lab5/#kopplung-zwischen-wurzelobjekten-und-domanenmodulen-neu-denken","title":"Kopplung zwischen Wurzelobjekten und Dom\u00e4nenmodulen neu denken","text":"<p>In a traditional data-centric and layered architecture, it is common to design the application around a centric data model. But this leads to high coupling in the long term (see section \"Problems of Layered Architecture\" in the trainings slides). In this lab the Adapter.Out - UseCase.In Pattern and the Application Service Pattern are described. Additional approaches are shown in the training slides.</p>"},{"location":"docs/lab5/lab5/#the-adapterout-usecasein-pattern","title":"The Adapter.Out - UseCase.In Pattern","text":"<p>Implement the Adapter.Out - UseCase.In Pattern between the domain modules Garage order and Vehicle.</p>"},{"location":"docs/lab5/lab5/#introduce-the-use-case-fetchvehiclebylicenseplate-vehicle-module","title":"Introduce the Use Case FetchVehicleByLicensePlate (Vehicle Module)","text":"Coding Task 6.1 <ol> <li>          Introduce an additional incoming use case in the domain module Vehicle with the name           FetchVehicleByLicensePlate. The use case should contain the method fetchByLicensePlate </li> <li>          Implement the use case by extending the VehicleQueryService.       </li> </ol> Java <pre><code>Vehicle fetchByLicensePlate(LicensePlate licensePlate);\n</code></pre> Kotlin <pre><code>fun fetchByLicensePlate(licensePlate: LicensePlate): Vehicle;\n</code></pre> C# <pre><code>Vehicle FetchByLicensePlate(LicensePlate licensePlate);\n</code></pre> Verify 6.1 RUN DomainRing_Task_6_1     RUN ArchitectureTest_Task_6_1 (Java &amp; Kotlin)     RUN all architecture tests (C#)"},{"location":"docs/lab5/lab5/#implement-the-use-case-fetchvehicle-garage-order-module","title":"Implement the Use Case FetchVehicle (Garage Order Module)","text":"Coding Task 6.2 <ol> <li>          Have a look at the outgoing use case FetchVehicle in garage/order/usecase/out </li> <li>          Implement the output adapter with the name VehicleModuleClient and a mapper with the name           VehicleToOriginVehicleMapper.       </li> </ol> Verify 6.2 RUN OutputAdapter_Task_6_2     RUN ArchitectureTest_Task_6_2 (Java &amp; Kotlin)     RUN all architecture tests (C#)"},{"location":"docs/lab5/lab5/#the-application-service-pattern","title":"The Application Service Pattern","text":"Coding Task 6.3 Implement the Application Service Pattern between the domain modules Parts Catalogue and Vehicle. <ol> <li>       Have a look at the ExplosionChartApplicationService in parts/catalogue/appservice and notice the dependency to       VehicleQuery of the domain module vehicle.    </li> <li>         Complete the implementation of the use case ExplosionChartQuery in ExplosionChartQueryService </li> <li>         Use VehicleQuery from the vehicle module to fetch necessary vehicle data    </li> <li>         Implement and use the mapper VehicleToOriginVehicleMapper </li> </ol> Verify 6.3 RUN ApplicationService_Task_6_3     RUN ArchitectureTest_Task_6_3 (Java &amp; Kotlin)     RUN all architecture tests (C#)"},{"location":"docs/lab5/lab5/#clean-architecture-fitness-functions-currently-not-working","title":"Clean Architecture Fitness Functions - Currently Not Working","text":"Optional Coding Task 6.4 <ol> <li> RUN CleanArchitectureTest    </li> <li>       Fix the test by extending the test should_check_clean_architecture_all_rings_architectural_expressive </li> <li> RUN CleanArchitectureTest again. Why did the test pass now?    </li> </ol> Java &amp; Kotlin <pre><code>.adapterOutOfAdapterOutUseCaseInPattern(\"..garage.order.adapter.out..\")\n.applicationService(\"..parts.catalogue.appservice..\")\n</code></pre>"}]}